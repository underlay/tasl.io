tasl = *( block newline ) block

block = *WSP [ line-comment / statement *WSP ]

statement = namespace-definition
          / literal-definition
          / class-declaration

keyword-namespace = %x6E.61.6D.65.73.70.61.63.65
keyword-literal   = %x6C.69.74.65.72.61.6C
keyword-class     = %x63.6C.61.73.73

namespace-definition = keyword-namespace 1*WSP identifier 1*WSP namespace-uri
literal-definition   = keyword-literal 1*WSP identifier 1*WSP term
class-declaration    = keyword-class 1*WSP term 1*WSP 1*WSP type

type = identifier    ; type variable
     / reference     ; reference type
     / uri           ; uri type
     / product       ; product type
     / coproduct     ; coproduct type

uri        = "<>"
reference  = "*" *WSP term
product    = "{" [ *WSP newline components ] *WSP "}"
components = *( *WSP [ line-comment / component *WSP ] newline )
component  = term 1*WSP "->" 1*WSP type
coproduct  = "[" [ *WSP newline options ] *WSP "]"
options    = *( *WSP [ line-comment / option *WSP ] newline )
option     = term 1*WSP "<-" 1*WSP type

term = identifier ":" 1*( pchar / "/" / "?" )

namespace-uri = absolute-uri ( "/" / "?" / "#" )
absolute-uri  = scheme ":" ( "//" authority / [ "/" ] 1*pchar ) *( "/" 1*pchar )

identifier = ALPHA *(ALPHA / DIGIT)

newline = LF / CRLF

line-comment = "#" *(WSP / VCHAR)